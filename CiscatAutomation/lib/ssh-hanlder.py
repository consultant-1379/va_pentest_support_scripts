import sys
import re
import time
import logging
import wexpect

class SshHandler():
    COMMAND_KEY = 'sudo ssh -o StrictHostKeyChecking=no -i key_path -v username@hostname'
    COMMAND_PWD = 'ssh -o StrictHostKeyChecking=no -v username@hostname'
    def __init__(self, host, username, password=None, key=None, child=None, parentprompt=None, sudo_password=None, output=None):
        self._host = host
        self._username = username
        self._password = password
        self._key = key
        self._child = child
        self._parentprompt = parentprompt
        self._sudo_password= sudo_password
        self._prompt = None
        self._output = output

    def connect(self):
        logging.info('SshHandler : connect')
        if self._password:
            command = SshHandler.COMMAND_PWD.replace('username', self._username).replace('hostname', self._host)
        else:
            command = SshHandler.COMMAND_KEY.replace('username', self._username).replace('hostname', self._host).replace('key_path', self._key)
        if self._child:
            self._child.sendline(command)
        else:
            self._child = wexpect.spawn(command)

        if self._output:
            self._child.logfile = self._output
        else:
            if not self._child.logfile:
                self._child.logfile = sys.stdout.buffer
        self._child.timeout = 10
        resp = self._child.expect(['\[sudo\] password for ', 'Authenticated to', '\'s password', 'No route to host'])
        if resp == 0:
            logging.info(f'SshHandler {self._host} : sudo password requested')
            self._child.sendline(self._sudo_password)
            r = self._child.expect(['Authenticated to', 'No route to host'])
            if r == 1:
                raise wexpect.exceptions.TIMEOUT('NO ROUTE TO HOST !')
            logging.info(f'SshHandler {self._host} : authenticated')
        elif resp == 2:
            logging.info(f'SshHandler {self._host} : password requested')
            if self._key:
                logging.warning(f'SshHandler {self._host} : got password for key authentication')
                self._child.sendcontrol('c')
                if self._parentprompt:
                    logging.warning(f'SshHandler {self._host} : got password for key authentication with parent prompt')
                    self._child.expect(re.escape(self._parentprompt)+'$')
                logging.warning(f'SshHandler {self._host} : raising timeout')
                raise pexpect.exceptions.TIMEOUT('Errore !')
            logging.info(f'SshHandler {self._host} : sending password')
            self._child.sendline(self._password)
            self._child.expect('Authenticated to')
            logging.info(f'SshHandler {self._host} : authenticated')
        elif resp == 3:
            raise pexpect.exceptions.TIMEOUT('NO ROUTE TO HOST !')
        self._child.sendline(f"PS1='[{self._host}-AutomationScript]$'")
        self._child.expect(f'\[{self._host}-AutomationScript\]\$$')
        logging.info(f'SshHandler {self._host} : authenticated')
        self._prompt = f'[{self._host}-AutomationScript]$'
        return {'sshhandler': self._child, 'prompt': f'[{self._host}-AutomationScript]$'}

    def setTimeout(self, timeout):
        self._child.timeout = timeout
    def getTimeout(self):
        return self._child.timeout

    def disconnect(self):
        if self._prompt:
            logging.info(f'Host {self._host} - disconnecting')
            self._child.sendline('exit')
            if self._parentprompt:
                self._child.expect(re.escape(self._parentprompt)+'$')
                logging.info(f'Host {self._host} - excpect success with parent prompt')

if __name__ == '__main__':
    try:
        test = SshHandler('131.160.170.194', 'nessus', password='nessus')
        resp = test.connect()
    except pexpect.exceptions.TIMEOUT:
        print(f'Errore')
        sys.exit(0)
    resp['sshhandler'].sendline('sleep 3 ;ls /')
    resp['sshhandler'].expect(re.escape(resp['prompt'])+'$')

    test.disconnect()
    #
    # test1 = SshHandler('10.247.246.186', 'cloud-user', key='/root/.ssh/vm_private_key', sudo_password='nessus', child=resp['sshhandler'])
    # test1.connect()




