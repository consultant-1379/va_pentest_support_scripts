import glob
import os

import numpy as np
import pandas as pd
import xlsxwriter

def generates_report(target, instance, report_name, ciscat_version, iso_version):
    report_path = os.path.join(os.path.expanduser('~'), 'scriptCiscat', 'reports')
    resources_path = os.path.join(os.path.expanduser('~'), 'scriptCiscat', 'resources')
    folder_path = os.path.join(report_path, target, instance)
    file_list = glob.glob (os.path.join(folder_path, '*.csv')) # get all the csv files
    if len(file_list) == 0:
        return 0
    # Read mapping file for results manual
    with open(os.path.join(resources_path, target, instance, 'mapping4manual.txt')) as mapping:
        mapping_list = mapping.read().splitlines()
    mapping_dict = {}
    for item in mapping_list:
        key, value = item.split(' ')
        mapping_dict[key] = value

    if not report_name.lower().endswith('.xlsx'):
        # If not, add the extension
        report_name += '.xlsx'

    writer = pd.ExcelWriter(os.path.join(report_path, target, instance, report_name), engine='xlsxwriter')


    columns = ['Assessment Date', 'Target', 'Benchmark Version', 'Benchmark Name', 'Profile', 'Rule Section', 'Rule Title', 'Result', 'Remediation']
    cols_names = {'Assessment Date':'AssessmentDate', 'Benchmark Version':'BenchmarkVersion', 'Benchmark Name': 'BenchmarkName', 'Rule Section':'RuleSection', 'RuleTitle':'RuleTitle'}
    dfs = []
    for file in file_list:
        df = pd.read_csv (file, usecols=columns) # read each file into a DataFrame
        df.drop(df.tail(2).index, inplace=True)
        dfs.append (df) # append the DataFrame to the list
    big_df = pd.concat(dfs, ignore_index=True) # concatenate the list of DataFrames
    pivot_df = big_df.pivot_table(index="Target",  columns='Result', aggfunc={'Result':'count'})
    new_df = pivot_df.reset_index()
    new_df.reset_index()
    new_df.columns=['Target', 'Fail', 'Manual', 'Pass', 'Unknown']
    new_df['Total'] = new_df['Pass'] + new_df['Fail']+ new_df['Manual']
    new_df['Score'] = new_df['Pass'] / (new_df['Fail']+new_df['Pass'])*100
    new_df['Score'] = new_df['Score'].round(1)

    new_df['Score'] = new_df['Score'].astype(str)
    new_df['Score'] = new_df['Score'] + ' %'

    df_info = pd.DataFrame({
        'CISCAT Version':[ciscat_version],
        'ENM ISO version':[iso_version],
        'Target Deployment':[f'{target} {instance}']
    })

    def change_result(row):
        if row['Rule Section'] in mapping_dict.keys() and row['Result'] == 'manual':
            return mapping_dict[row['Rule Section']]
        return row['Result']
    big_df['Result'] = big_df.apply(change_result, axis=1)

    # export the DataFrame to the Excel sheet
    df_info.to_excel(writer, sheet_name='Info', index=False)
    big_df.to_excel(writer, sheet_name='Results', index=False)
    new_df.to_excel(writer, sheet_name='Summary', index=False)

    workbook = writer.book
    format = workbook.add_format()
    format_info = workbook.add_format({
        'bg_color' : '#76933C'
    })

    format.set_align('left')
    worksheet_info = writer.sheets['Info']
    worksheet = writer.sheets['Results']
    worksheet_p = writer.sheets['Summary']

    (max_row_info, max_col_info) = df_info.shape
    # get the dimensions of the main DataFrame
    (max_row, max_col) = big_df.shape
    # get the dimensions of the Pivot DataFrame
    (max_row_p, max_col_p) = new_df.shape

    info_column_settings = [{'header': column} for column in df_info.columns.to_list()]
    column_settings = [{'header': column} for column in big_df.columns.to_list()]
    pivot_column_settings = [{'header': column} for column in new_df.columns.to_list()]

    worksheet_info.add_table(0, 0, max_row_info, max_col_info - 1, {'columns': info_column_settings, 'style': 'Table Style Medium 11', 'autofilter': False})
    worksheet.add_table(0, 0, max_row, max_col - 1, {'columns': column_settings, 'style': 'Table Style Medium 11'})
    worksheet_p.add_table(0, 0, max_row_p, max_col_p - 1, {'columns': pivot_column_settings, 'style': 'Table Style Medium 11'})
    print(format)
    worksheet_info.set_column(0, max_col_info - 1, 20, format)
    worksheet.set_column(0, max_col - 1, 20, format)
    worksheet_p.set_column(0, max_col_p - 1, 20, format)
    writer.close()
    return len(file_list)

if __name__ == '__main__':
    generates_report('pENM', '429', 'Ciscat_Report', 'ciscat1234', 'iso456')