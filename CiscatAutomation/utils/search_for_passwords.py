import datetime
import glob
import os
import signal
import sys
import time

from multiprocessing import Pool
import paramiko

my_path = os.path.join(os.path.expanduser('~'), 'scriptCiscat', 'resources')
#cmd = 'sudo grep -o -r -i -I -P "((((pass(word|wd))|(pwd))|(secret|)) *(=|:) *[^ \\n]+)" / --exclude-dir=boot/ --exclude-dir={ERICmodeldeployment/,/sys/,python2.7/,linpeas/,python3.6/,share/,modules/,perl5/,/usr/bin,/usr/sbin,proc/,OpenSSL,python3.9,Defensics,selinux,python3.10,Burp,python3,share, substitute}'
cmd = 'grep -o -r -i -I -P "((((pass(word|wd))|(pwd))|(secret|ssotoken|credential)) *(=|:) *[^ \\n]{3,150})" /'
dirs_to_exclude = [
    'boot', 'sys',  'examples', 'docs', 'doc', 'ddc_data', 'ERICddc', 'ERICmodeldeployment', 'pmic1', 'pmic2', 'ul_spectrum_files',
    'lib64', 'config_mgt', 'amos', 'smrs', 'hackbook', 'nobody', 'shared', 'proc', 'python*'
]

def create_exclude_list(ip_address, username, password=None, key=None):
    tmp = ' --exclude-dir=' + ' --exclude-dir='.join(dirs_to_exclude)
    # exclude_nfs_list = get_nfs_mounts(ip_address,22, username,  key_filename=key)
    # t = []
    # for e in exclude_nfs_list:
    #     path, last_directory = os.path.split(e)
    #     t.append(last_directory)
    #     print(last_directory)
    # t.remove('data')
    # tmp += ' --exclude-dir=' + ' --exclude-dir='.join(t)
    return tmp


def get_nfs_mounts(host, port, username, password=None, key_filename=None):
    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())

    # Connect to the host
    if key_filename:
        k = paramiko.RSAKey.from_private_key_file(key_filename)
        ssh.connect(host, username=username, pkey=k, timeout=6, banner_timeout=6)
    else:
        ssh.connect(host, username=username, password=password, timeout=6, banner_timeout=200)

    # Execute the command to get NFS mounts
    stdin, stdout, stderr = ssh.exec_command('mount -t nfs')

    # Process the output
    nfs_mounts = []
    for line in stdout:
        # Parse the output to extract the mount point
        parts = line.split()
        if len(parts) >= 3:
            nfs_mounts.append(f'{parts[2]}')

    ssh.close()

    return nfs_mounts


def passwords_finder(ip_address, username, password=None, key=None, output_file=None):
    t0 = time.time()
    exclude_nfs_list = create_exclude_list(ip_address, username, key=key)
    command = cmd + exclude_nfs_list
    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    with open(output_file, 'w') as log:

        try:
            # Try to connect to the machine using the credentials
            if key:
                k = paramiko.RSAKey.from_private_key_file(key)
                ssh.connect(ip_address, username=username, pkey=k, timeout=6, banner_timeout=6)
            else:
                ssh.connect(ip_address, username=username, password=password, timeout=6, banner_timeout=200)
            print(f' host : {ip_address} Run command {command}')
            stdin, stdout, stderr = ssh.exec_command(command)
            # Capture and print the output of the grep command
            for line in stdout:
                log.write(line.strip() + '\n')
                log.flush()

            ssh.close()
        except Exception as e:
            print(f'Error paramiko.SSHException for {ip_address} credential  {username} --> {e}')
        except KeyboardInterrupt:
            print(f'Error paramiko.SSHException for {ip_address} credential  {username} --> {e}')
            print('CLOSING COMMAND')
            ssh.close()
        finally:
            print(f'Execution ended for {ip_address}')
            ssh.close()
        exe_time = int((time.time() - t0) / 60)
        log.write(f'{ip_address} Execution time : {exe_time}')
        return f'{ip_address} : {exe_time}'

def execute_task(data):
    host, user, password_or_key, output_file = data
    print(f'Task called with {[host, user, password_or_key, output_file]}')

    if user == 'cloud-user':
        label = passwords_finder(host, user,
                         key=password_or_key, output_file=output_file)
    else:
        label = passwords_finder(host, user, password=password_or_key, output_file=output_file)
    return label

if __name__ == '__main__':
    target = ''
    while not target in ['pENM', 'vENM', 'siENM']:
        target = input('Insert a valid target [pENM | vENM | siENM] ')
    instance = input(f'Insert a valid {target} instance :')
    files = glob.glob(os.path.join(my_path, target, instance, 'host_list_*'))
    jobs_parameters = []
    print(f'Scanning started at {time.asctime()}')
    for f in files:
        with open(f) as source:
            info = source.read().splitlines()
        for i in info:
            hostname, ip, user, pass_or_key = i.split(',')
            if user == 'cloud-user':
                pass_or_key = os.path.join(my_path, target, instance, pass_or_key)
                #pass_or_key = f'C:\\Users\\EENRMUS\\scriptCiscat\\resources\\pENM\\429\\{pass_or_key}'
            path = os.path.join(my_path, target, instance, 'ctp', f'ctp_{hostname}.log')
            jobs_parameters.append([ip, user, pass_or_key, path])
    with Pool(8) as p:
        print(p.map(execute_task, jobs_parameters))
    print(f'Scanning ended at {time.asctime()}')




    # current_datetime1 = daetime.datetime.now()
    # passwords_finder('10.247.246.236', 'cloud-user', key='C:\\Users\\EENRMUS\\scriptCiscat\\resources\\pENM\\429\\vm_private_key')
    # current_datetime2 = datetime.datetime.now()
    # print(current_datetime1.strftime("%A, %B %d, %Y %I:%M%p"))
    # print(current_datetime2.strftime("%A, %B %d, %Y %I:%M%p"))
    # lista = get_nfs_mounts('10.247.246.236', 22,'cloud-user', key_filename='C:\\Users\\EENRMUS\\scriptCiscat\\resources\\pENM\\429\\vm_private_key' )
    # for l in lista:
    #     print(l)
    # print(', '.join(lista))